// Test generated by RoostGPT for test reactUnitTesting9Jan using AI Type Open AI and AI Model gpt-4-1106-preview


// __tests__/src/api/index.test.js
import axios from 'axios';
import { fetchData, fetchDailyData, fetchCountries } from '../../src/api';

// Mocking axios to prevent actual HTTP requests
jest.mock('axios');

describe('fetchData API function', () => {
  beforeEach(() => {
    axios.get.mockClear();
  });

  test('fetches data successfully for global data', async () => {
    // Mock axios response for global data
    const data = {
      confirmed: { value: 1000 },
      recovered: { value: 500 },
      deaths: { value: 100 },
      lastUpdate: '2021-01-01'
    };
    axios.get.mockResolvedValueOnce({ data });
    
    // Call the fetchData function with no country
    const response = await fetchData();
    
    // Assert the expected result
    expect(axios.get).toHaveBeenCalledWith('https://covid19.mathdro.id/api');
    expect(response).toEqual({
      confirmed: { value: 1000 },
      recovered: { value: 500 },
      deaths: { value: 100 },
      lastUpdate: '2021-01-01'
    });
  });

  test('fetches data successfully for a specific country', async () => {
    // Mock axios response for country data
    const country = 'USA';
    const data = {
      confirmed: { value: 2000 },
      recovered: { value: 1500 },
      deaths: { value: 200 },
      lastUpdate: '2021-01-01'
    };
    axios.get.mockResolvedValueOnce({ data });
    
    // Call the fetchData function with a country
    const response = await fetchData(country);
    
    // Assert the expected result
    expect(axios.get).toHaveBeenCalledWith(`https://covid19.mathdro.id/api/countries/${country}`);
    expect(response).toEqual({
      confirmed: { value: 2000 },
      recovered: { value: 1500 },
      deaths: { value: 200 },
      lastUpdate: '2021-01-01'
    });
  });

  test('fetches data and handles failure', async () => {
    // Mock a failure (e.g. network error)
    const error = new Error('Network Error');
    axios.get.mockRejectedValueOnce(error);
    
    // Call the fetchData function and expect an error
    const response = await fetchData();
    
    // Assert that the error is handled properly
    expect(axios.get).toHaveBeenCalled();
    expect(response).toEqual(error);
  });
});

// Additional tests for fetchDailyData and fetchCountries can be added using similar patterns

